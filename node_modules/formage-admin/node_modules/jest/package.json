{
  "name": "jest",
  "description": "JavaScriptational State Transfer. JS restful API layer with Mongoose based resources. Inspired by python Tastypie",
  "version": "0.1.32",
  "author": {
    "name": "Ishai Jaffe",
    "email": "ishai@empeeric.com"
  },
  "contributors": [
    {
      "name": "Alon Valadji",
      "email": "alon@empeeric.com"
    }
  ],
  "dependencies": {
    "underscore": "",
    "sji": ""
  },
  "devDependencies": {
    "express": "",
    "mongoose": "",
    "api-easy": ""
  },
  "main": "index",
  "keywords": [
    "api",
    "mongoose",
    "rest",
    "restful",
    "resource"
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:Empeeric/jest.git"
  },
  "engines": {
    "node": ">= 0.4.1"
  },
  "readme": "Jest\n====\n\n> JavaScriptational State Transfer for node.js with easy generating resource from Mongoose ORM\n\n####  #\n\nintroduction\n------------\nThis module provides Resource base class with:\n\n- Authentication\n- Authorization\n- Pagination\n- Cache\n- Throttling\n- Validation\n- MongooseResource\n- Resources listing\n\nsynopsis\n--------\n```js\nvar express = require('express'),\n    app = express(),\n    Jest = require('jest'),\n    mongoose = require('mongoose'),\n    Schema = mongoose.Schema;\n\nmongoose.connect('mongodb://localhost/app');\n\napp.configure(function () {\n    app.set('port', process.env.PORT || 80);\n    app.use(express.logger('dev'));\n    app.use(express.bodyParser());\n    app.use(express.methodOverride());\n    app.use(app.router);\n});\n```\n\n// create mongoose model\n\n```js\nvar User = mongoose.model('user', new Schema({\n    username: {type: String, required: true},\n    email: String,\n    password: {type: String, validate: [function(v) { return true}, 'custom validate']},\n    credits: {type: Number, min: 1, max: 230},\n    role: {type: String, 'default': 'user' ,enum: ['user', 'admin']},\n    date: {type:Date, 'default': Date.now},\n    groups: [{name:String, permissions: [{name:String, expires:Date}]}]\n}));\n```\n\n// create mongoose resource for User model\n\n```js\nvar UserResource = Jest.MongooseResource.extend({\n    init: function(){\n        // call Jest.Resource constructor\n        // passing the Model User we created\n        this._super(User);\n\n        // use array to decide which fields will be visible by API\n        // this.fields = ['username','credits'];\n        // use tree object to decide recursively which fields to expose\n        this.fields = {username: true, credits: true, groups: {name: true, permissions: {name: true} }};\n\n        // use list or\n        this.update_fields = ['email', 'password'];\n\n        // specify base query for the model\n        this.default_query = function(query){\n            return query.where('credits').gte(10);\n        };\n\n        // specify which fields can be used to filter\n        this.filtering = {credits: true};\n\n        // which http methods are allowed\n        this.allowed_methods = ['get', 'post', 'put'];\n    }\n})\n\nvar api = new Jest.Api('api', app);\n\napi.register('users', new UserResource());\n\napp.listen(app.get('port'), function(){\n    console.log('express started on port %d', app.get('port'));\n})\n```\n\nnow go to `http://localhost/api/` to see the api's and `http://localhost/api/users`\nto work with User model the Jest way.\n\n\ninstallation\n------------\n\n    $ npm install jest\n\ndocumentation\n-------------\n\nThere is none.\nBut there is an example, and a test.\n\nAnd maybe one day will be...\n",
  "readmeFilename": "README.md",
  "_id": "jest@0.1.32",
  "_from": "jest@>= 0.1.30"
}
